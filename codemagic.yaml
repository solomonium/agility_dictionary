workflows:
  ios-workflow:
    name: iOS Workflow
    instance_type: mac_mini_m2
    max_build_duration: 120
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "dev"
          include: true
      cancel_previous_builds: false
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
      groups:
        # - shorebird_credentials
        - appstore_credentials
      ios_signing:
        distribution_type: app_store
        bundle_identifier: ${BUNDLE_ID} #com.solo.flutterCodemagicApp
    integrations:
      app_store_connect: SolomonAPIKey
    scripts:
      - name: Set up code signing settings on Xcode project
        script: xcode-project use-profiles
      - name: Get Flutter packages
        script: flutter pub get
      - name: Install pods
        script: find . -name "Podfile" -execdir pod install \;
      - name: Flutter build ipa
        script: |
          flutter build ipa --release \
            --export-options-plist="/Users/builder/export_options.plist" \
            --build-name=$(grep "version:" pubspec.yaml | head -n 1 | awk '{print $2}' | cut -d'+' -f1) \
            --build-number=$(app-store-connect get-latest-app-store-build-number "$APP_STORE_APPLE_ID")

      # - name: Get the latest build number
      #   script: |
      #     LATEST_BUILD_NUMBER=$(app-store-connect get-latest-testflight-build-number $APP_APPLE_ID)
      #     cd ./ios
      #     agvtool new-version -all $(($LATEST_BUILD_NUMBER + 1))

      # - name: Increment build number
      #   script: |
      #     cd "$CM_BUILD_DIR"
      #     LATEST_BUILD_NUMBER=$(app-store-connect get-latest-app-store-build-number "$APP_STORE_APPLE_ID")

      #     # If we got just a number (not semantic version), start with 1.0.0
      #     if [[ "$LATEST_BUILD_NUMBER" =~ ^[0-9]+$ ]]; then
      #       if [[ "$LATEST_BUILD_NUMBER" -lt 1 ]]; then
      #         NEW_BUILD_NUMBER="1.0.0"
      #       else
      #         # Convert build number to semantic version (e.g., build 7 â†’ 1.0.7)
      #         NEW_BUILD_NUMBER="1.0.$LATEST_BUILD_NUMBER"
      #       fi
      #     # If we got a semantic version, process it
      #     elif [[ "$LATEST_BUILD_NUMBER" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
      #       MAJOR=${BASH_REMATCH[1]}
      #       MINOR=${BASH_REMATCH[2]}
      #       PATCH=${BASH_REMATCH[3]}

      #       if [[ $MAJOR -lt 7 ]]; then
      #         NEW_BUILD_NUMBER="7.0.0"
      #       else
      #         NEW_PATCH=$((PATCH + 1))
      #         NEW_BUILD_NUMBER="$MAJOR.$MINOR.$NEW_PATCH"
      #       fi
      #     else
      #       echo "Error: Invalid build number format: $LATEST_BUILD_NUMBER"
      #       exit 1
      #     fi

      #     echo "Latest build number: $LATEST_BUILD_NUMBER"
      #     echo "New build number: $NEW_BUILD_NUMBER"

      #     cd ios
      #     agvtool new-version -all "$NEW_BUILD_NUMBER"
      #     agvtool new-marketing-version "$NEW_BUILD_NUMBER"

      # - name: Flutter build ipa
      #   script: |
      #     flutter build ipa --release \
      #       --build-name=LATEST_VERSION \
      #       --build-number=$(($(app-store-connect get-latest-app-store-build-number "$APP_ID") + 1)) \
      #       --export-options-plist="/Users/builder/export_options.plist"
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
    # artifacts:
    #   - build/ios/iphonesimulator/Runner.app
    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        submit_to_app_store: true
        release_type: AFTER_APPROVAL
